<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.bonitasoft.store</groupId>
	<artifactId>bonita-store</artifactId>
	<version>2.8.0</version>
	<properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
	    <bonita.version>7.7.3</bonita.version>
    </properties>
	<dependencies>


		<dependency>
			<groupId>org.bonitasoft.engine</groupId>
			<artifactId>bonita-client</artifactId>
            <version>${bonita.version}</version>
		</dependency>
		<!--  This library is not need by BonitaStore itself, but for any other external usage of the BonitaStoreAccessorClient (like in the mvn install which use this java soft to deploy the page), this is required to create the profile -->
		<!--  mvn install  -->
		<dependency>
			<groupId>com.bonitasoft.engine</groupId>
			<artifactId>bonita-client-sp</artifactId>
            <version>${bonita.version}</version>
		</dependency>
		 
		<dependency>
			<groupId>org.bonitasoft.engine</groupId>
			<artifactId>bonita-server</artifactId>
            <version>${bonita.version}</version>
		</dependency>

		<dependency>
			<groupId>org.bonitasoft.log.event</groupId>
			<artifactId>bonita-event</artifactId>
			<version>1.8.0</version>
		</dependency>

		<dependency>
			<groupId>com.googlecode.json-simple</groupId>
			<artifactId>json-simple</artifactId>
			<version>1.1</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.5.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpcore</artifactId>
			<version>4.4.4</version>
		</dependency>
	</dependencies>
	<!-- ******************** Community Maven repository **************** -->
	<repositories>
		<repository>
			<releases>
				<enabled>true</enabled>
				<checksumPolicy>warn</checksumPolicy>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
			<id>logPageBonita</id>
			<name>logPageBonita</name>
			<url>https://raw.githubusercontent.com/Bonitasoft-Community/bonitamavenrepository/master</url>
			<layout>default</layout>
		</repository>
	</repositories>
	<build>
		<plugins>
			<!-- ******************** Copy JAR files under bonitamavenrepository **************** -->
			<plugin>
				<groupId>org.codehaus.groovy.maven</groupId>
				<artifactId>gmaven-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>execute</goal>
						</goals>
						<configuration>
							<source>
								import java.nio.file.*;

								String groupIdPath = "${project.groupId}".replace('.', '/');

								String fileName = "${artifactId}-${version}.jar";
								Path destPath = Paths.get( "../bonitamavenrepository/${groupIdPath}/${artifactId}/${version}" );

								Path sourceJarFile = Paths.get("target/"+fileName);
								Path destJarFile = Paths.get( destPath.toString()+"/"+fileName);
								copyFile( sourceJarFile, destJarFile);

								Path sourcePom = Paths.get("pom.xml" );
								Path destPom = Paths.get( destPath.toString()+"/${artifactId}-${version}.pom" );
								copyFile( sourcePom, destPom);
								return;

								public void copyFile( Path sourcePath, Path destinationPath ) {
									try {
										Path parentPath = destinationPath.getParent();
										println(" Create Directory:"+parentPath.toString());
										Files.createDirectories(parentPath);
		
		
										try {
											if (destinationPath.toFile().exists()) {
												println(" Delete existing file:"+destinationPath.toString());
												Files.delete(destinationPath);
											}
										} catch(Exception e) {
											println(" Error during deletion "+e.getMessage());
										}
										println(" Copy:"+sourcePath+" =>"+destinationPath);
		
	
										def file = sourcePath.toFile();
										def newFile = destinationPath.toFile();
										Files.copy(file.toPath(), newFile.toPath());
	
									} catch(Exception e )
									{
										println("Exception "+e.getMessage());
									}
								}




							</source>
						</configuration>
					</execution>
				</executions>
			</plugin>


		</plugins>
	</build>
</project>